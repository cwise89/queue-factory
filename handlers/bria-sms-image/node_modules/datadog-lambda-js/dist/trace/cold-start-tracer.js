"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColdStartTracer = void 0;
var span_wrapper_1 = require("./span-wrapper");
var ColdStartTracer = /** @class */ (function () {
    function ColdStartTracer(coldStartTracerConfig) {
        this.tracerWrapper = coldStartTracerConfig.tracerWrapper;
        this.parentSpan = coldStartTracerConfig.parentSpan;
        this.lambdaFunctionName = coldStartTracerConfig.lambdaFunctionName;
        this.coldStartSpanFinishTime = coldStartTracerConfig.coldStartSpanFinishTime;
        this.minDuration = coldStartTracerConfig.minDuration;
        this.ignoreLibs = coldStartTracerConfig.ignoreLibs.split(",");
    }
    ColdStartTracer.prototype.trace = function (rootNodes) {
        var e_1, _a;
        var _b;
        var coldStartSpanStartTime = (_b = rootNodes[0]) === null || _b === void 0 ? void 0 : _b.startTime;
        var coldStartSpan = this.createColdStartSpan(coldStartSpanStartTime, this.parentSpan);
        try {
            for (var rootNodes_1 = __values(rootNodes), rootNodes_1_1 = rootNodes_1.next(); !rootNodes_1_1.done; rootNodes_1_1 = rootNodes_1.next()) {
                var coldStartNode = rootNodes_1_1.value;
                this.traceTree(coldStartNode, coldStartSpan);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rootNodes_1_1 && !rootNodes_1_1.done && (_a = rootNodes_1.return)) _a.call(rootNodes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ColdStartTracer.prototype.createColdStartSpan = function (startTime, parentSpan) {
        var options = {
            tags: {
                service: "aws.lambda",
                operation_name: "aws.lambda.require",
                resource_names: this.lambdaFunctionName,
                "resource.name": this.lambdaFunctionName,
            },
            startTime: startTime,
        };
        if (parentSpan) {
            options.childOf = parentSpan.span;
        }
        var newSpan = new span_wrapper_1.SpanWrapper(this.tracerWrapper.startSpan("aws.lambda.load", options), {});
        newSpan.finish(this.coldStartSpanFinishTime);
        return newSpan;
    };
    ColdStartTracer.prototype.coldStartSpanOperationName = function (filename) {
        if (filename.startsWith("/opt/")) {
            return "aws.lambda.require_layer";
        }
        else if (filename.startsWith("/var/runtime/")) {
            return "aws.lambda.require_runtime";
        }
        else if (filename.includes("/")) {
            return "aws.lambda.require";
        }
        else {
            return "aws.lambda.require_core_module";
        }
    };
    ColdStartTracer.prototype.traceTree = function (reqNode, parentSpan) {
        var e_2, _a;
        if (reqNode.endTime - reqNode.startTime < this.minDuration) {
            return;
        }
        if (this.ignoreLibs.includes(reqNode.id)) {
            return;
        }
        var options = {
            tags: {
                service: "aws.lambda",
                operation_name: this.coldStartSpanOperationName(reqNode.filename),
                resource_names: reqNode.id,
                "resource.name": reqNode.id,
                filename: reqNode.filename,
            },
            startTime: reqNode.startTime,
        };
        if (parentSpan) {
            options.childOf = parentSpan.span;
        }
        var newSpan = new span_wrapper_1.SpanWrapper(this.tracerWrapper.startSpan(this.coldStartSpanOperationName(reqNode.filename), options), {});
        newSpan === null || newSpan === void 0 ? void 0 : newSpan.finish(reqNode.endTime);
        if (reqNode.endTime - reqNode.startTime > this.minDuration) {
            try {
                for (var _b = __values(reqNode.children || []), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    this.traceTree(node, newSpan);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    return ColdStartTracer;
}());
exports.ColdStartTracer = ColdStartTracer;
//# sourceMappingURL=cold-start-tracer.js.map